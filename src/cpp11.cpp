// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// config.cpp
std::string libproj_cpp_version();
extern "C" SEXP _libproj_libproj_cpp_version() {
  BEGIN_CPP11
    return cpp11::as_sexp(libproj_cpp_version());
  END_CPP11
}
// config.cpp
bool libproj_cpp_has_libtiff();
extern "C" SEXP _libproj_libproj_cpp_has_libtiff() {
  BEGIN_CPP11
    return cpp11::as_sexp(libproj_cpp_has_libtiff());
  END_CPP11
}
// config.cpp
bool libproj_cpp_has_libcurl();
extern "C" SEXP _libproj_libproj_cpp_has_libcurl() {
  BEGIN_CPP11
    return cpp11::as_sexp(libproj_cpp_has_libcurl());
  END_CPP11
}
// config.cpp
void libproj_cpp_cleanup();
extern "C" SEXP _libproj_libproj_cpp_cleanup() {
  BEGIN_CPP11
    libproj_cpp_cleanup();
    return R_NilValue;
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP libproj_c_configure_default_context(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP libproj_c_register_c_callables();

static const R_CallMethodDef CallEntries[] = {
    {"_libproj_libproj_cpp_cleanup",        (DL_FUNC) &_libproj_libproj_cpp_cleanup,        0},
    {"_libproj_libproj_cpp_has_libcurl",    (DL_FUNC) &_libproj_libproj_cpp_has_libcurl,    0},
    {"_libproj_libproj_cpp_has_libtiff",    (DL_FUNC) &_libproj_libproj_cpp_has_libtiff,    0},
    {"_libproj_libproj_cpp_version",        (DL_FUNC) &_libproj_libproj_cpp_version,        0},
    {"libproj_c_configure_default_context", (DL_FUNC) &libproj_c_configure_default_context, 6},
    {"libproj_c_register_c_callables",      (DL_FUNC) &libproj_c_register_c_callables,      0},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_libproj(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
